// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkinTime.BLL.Data;

#nullable disable

namespace SkinTime.BLL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250210092156_minhtri")]
    partial class minhtri
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Entities.ServiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DateToNextStep")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDetele")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ServiceID")
                        .HasColumnType("char(36)");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceID");

                    b.ToTable("ServiceDetails");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CustomerNavigationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ReservedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TherapistId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerNavigationId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TherapistId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.BookingTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("TransactionTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingTransactions");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateOnly?>("EventDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("TicketPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("TimeEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("TimeStart")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("thubmnail")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.EventTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EventNavigationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EventTicketID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("QRCode")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("TicketCode")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EventNavigationId");

                    b.HasIndex("UserID");

                    b.ToTable("EventTickets");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ServiceFeedback")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("service_feedback");

                    b.Property<int>("ServiceRating")
                        .HasColumnType("int")
                        .HasColumnName("service_rating");

                    b.Property<string>("TherapistFeedback")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("therapist_feedback");

                    b.Property<int>("TherapistRating")
                        .HasColumnType("int")
                        .HasColumnName("therapist_rating");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.QuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("QuestionID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SkinTypeID")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionID");

                    b.HasIndex("SkinTypeID");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ReservedEndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ReservedStartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ServiceDetailId")
                        .HasColumnType("char(36)")
                        .HasColumnName("service_detail_id");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("ServiceDetailId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid>("ServiceCategoryID")
                        .HasColumnType("char(36)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("service_name");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.ServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.ServiceImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceImages");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.ServiceRecommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ServiceID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SkinTypeID")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceID");

                    b.HasIndex("SkinTypeID");

                    b.ToTable("ServiceRecommendation");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.SkinType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SkinTypes");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Therapist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BIO")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Therapists");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.TicketTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRefundTransaction")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TicketNavigationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("TicketNavigationId");

                    b.ToTable("TicketTransactions");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Tracking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TherapistId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId")
                        .IsUnique();

                    b.HasIndex("TherapistId");

                    b.ToTable("Trackings");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("fullname");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Role")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("role");

                    b.Property<string>("UseName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.UserChoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("QuestionOptionID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionOptionID");

                    b.HasIndex("UserID");

                    b.ToTable("UserChoice");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("Entities.ServiceDetail", b =>
                {
                    b.HasOne("SkinTime.DAL.Entities.Service", null)
                        .WithMany("ServiceDetailNavigation")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Booking", b =>
                {
                    b.HasOne("SkinTime.DAL.Entities.User", "CustomerNavigation")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkinTime.DAL.Entities.Service", "ServiceNavigation")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkinTime.DAL.Entities.Therapist", "TherapistNavigation")
                        .WithMany()
                        .HasForeignKey("TherapistId");

                    b.HasOne("SkinTime.DAL.Entities.Voucher", "VoucherNavigation")
                        .WithMany("BookingNavigation")
                        .HasForeignKey("VoucherId");

                    b.Navigation("CustomerNavigation");

                    b.Navigation("ServiceNavigation");

                    b.Navigation("TherapistNavigation");

                    b.Navigation("VoucherNavigation");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.BookingTransaction", b =>
                {
                    b.HasOne("SkinTime.DAL.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.EventTicket", b =>
                {
                    b.HasOne("SkinTime.DAL.Entities.Event", "EventNavigation")
                        .WithMany("EventTickets")
                        .HasForeignKey("EventNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkinTime.DAL.Entities.User", "UserNavigation")
                        .WithMany("EventTickets")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Feedback", b =>
                {
                    b.HasOne("SkinTime.DAL.Entities.Booking", "BookingNavigation")
                        .WithOne("FeedbackNavigation")
                        .HasForeignKey("SkinTime.DAL.Entities.Feedback", "BookingId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("BookingNavigation");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.QuestionOption", b =>
                {
                    b.HasOne("SkinTime.DAL.Entities.Question", null)
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkinTime.DAL.Entities.SkinType", "SkinType")
                        .WithMany()
                        .HasForeignKey("SkinTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkinType");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Schedule", b =>
                {
                    b.HasOne("SkinTime.DAL.Entities.Booking", "BookingNavigation")
                        .WithMany("ScheduleNavigation")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.ServiceDetail", "ServiceDetailNavigation")
                        .WithMany("ScheduleNavigation")
                        .HasForeignKey("ServiceDetailId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("BookingNavigation");

                    b.Navigation("ServiceDetailNavigation");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Service", b =>
                {
                    b.HasOne("SkinTime.DAL.Entities.ServiceCategory", "ServiceCategory")
                        .WithMany("Service")
                        .HasForeignKey("ServiceCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.ServiceImage", b =>
                {
                    b.HasOne("SkinTime.DAL.Entities.Service", "Service")
                        .WithMany("ServiceImageNavigation")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.ServiceRecommendation", b =>
                {
                    b.HasOne("SkinTime.DAL.Entities.Service", "Service")
                        .WithMany("ServiceRecommendationNavigation")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkinTime.DAL.Entities.SkinType", "SkinType")
                        .WithMany("Recommendations")
                        .HasForeignKey("SkinTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("SkinType");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Therapist", b =>
                {
                    b.HasOne("SkinTime.DAL.Entities.User", "Users")
                        .WithOne("Therapists")
                        .HasForeignKey("SkinTime.DAL.Entities.Therapist", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.TicketTransaction", b =>
                {
                    b.HasOne("SkinTime.DAL.Entities.EventTicket", "TicketNavigation")
                        .WithMany()
                        .HasForeignKey("TicketNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TicketNavigation");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Tracking", b =>
                {
                    b.HasOne("SkinTime.DAL.Entities.Schedule", "ScheduleNavigation")
                        .WithOne("TrakingNavigation")
                        .HasForeignKey("SkinTime.DAL.Entities.Tracking", "ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkinTime.DAL.Entities.Therapist", "TherapistNavigation")
                        .WithMany("TrackingNavigation")
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("ScheduleNavigation");

                    b.Navigation("TherapistNavigation");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.UserChoice", b =>
                {
                    b.HasOne("SkinTime.DAL.Entities.QuestionOption", "QuestionOptions")
                        .WithMany()
                        .HasForeignKey("QuestionOptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkinTime.DAL.Entities.User", "Users")
                        .WithMany("UserChoices")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionOptions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.ServiceDetail", b =>
                {
                    b.Navigation("ScheduleNavigation");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Booking", b =>
                {
                    b.Navigation("FeedbackNavigation");

                    b.Navigation("ScheduleNavigation");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Event", b =>
                {
                    b.Navigation("EventTickets");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Question", b =>
                {
                    b.Navigation("QuestionOptions");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Schedule", b =>
                {
                    b.Navigation("TrakingNavigation");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Service", b =>
                {
                    b.Navigation("ServiceDetailNavigation");

                    b.Navigation("ServiceImageNavigation");

                    b.Navigation("ServiceRecommendationNavigation");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.ServiceCategory", b =>
                {
                    b.Navigation("Service");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.SkinType", b =>
                {
                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Therapist", b =>
                {
                    b.Navigation("TrackingNavigation");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("EventTickets");

                    b.Navigation("Therapists")
                        .IsRequired();

                    b.Navigation("UserChoices");
                });

            modelBuilder.Entity("SkinTime.DAL.Entities.Voucher", b =>
                {
                    b.Navigation("BookingNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
